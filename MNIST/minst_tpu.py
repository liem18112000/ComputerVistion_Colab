# -*- coding: utf-8 -*-
"""MINST_TPU.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PcoK-I6RQ40ocY3996eIHyS-rhxnq1nD
"""

import tensorflow as tf
from tensorflow.keras.layers import *
from tensorflow.keras.models import Sequential as Base_Model
from tensorflow.keras.applications import VGG19 as Pretrained_Model
from tensorflow.keras.datasets import mnist as dataset
import os
from datetime import datetime
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split

def create_model():

    pretrained_model = Pretrained_Model(
        input_shape=(224, 224, 3),
        include_top = False,
        weights='imagenet'
    )

    for layer in pretrained_model.layers:
        layer.trainable = False

    model = Base_Model([
        Input(shape=(28, 28, 1)),
        UpSampling3D(size=(8, 8, 3)),
        pretrained_model,
        Dropout(0.5),
        Flatten(),
        Dense(4096, activation='relu'),
        Dense(2048, activation='relu'),
        Dense(1024, activation='relu'),
        Dense(512, activation='relu'),
        Dense(256, activation='relu'),
        Dense(128, activation='relu'),
        Dense(10, activation='softmax'),
    ])

    model.summary()

    return model

# Load MNIST datasets
(x_train, y_train), (x_test, y_test) = dataset.load_data()
x_train, x_test = np.expand_dims(x_train, axis = 3), np.expand_dims(x_test, axis = 3)  

# Rescale the images from [0,255] to the [0.0,1.0] range.
x_train, x_test = np.array(x_train, dtype=np.float32)/255.0, np.array(x_test, dtype=np.float32)/255.0
y_train, y_test = tf.keras.utils.to_categorical(y_train, 10, dtype=np.uint8),tf.keras.utils.to_categorical(y_test, 10, dtype=np.uint8)

# Brief information of datasets
print("Shape of original training examples:", np.shape(x_train))
print("Shape of original test examples:", np.shape(x_test))
print("Shape of original training result:", np.shape(y_train))
print("Shape of original test result:", np.shape(y_test))

resolver = tf.distribute.cluster_resolver.TPUClusterResolver(tpu='grpc://' + os.environ['COLAB_TPU_ADDR'])
tf.config.experimental_connect_to_cluster(resolver)
tf.tpu.experimental.initialize_tpu_system(resolver)
strategy = tf.distribute.experimental.TPUStrategy(resolver)

with strategy.scope():
    model = create_model()

    model.compile(
        optimizer='adam',
        loss='categorical_crossentropy',
        metrics=['accuracy']
    )

    history = model.fit(
        x_train, y_train, 
        validation_data = (x_test, y_test),
        batch_size=1024, 
        epochs=50,
        callbacks = [tf.keras.callbacks.EarlyStopping(monitor='loss', patience=3)]
    )

model.evaluate(x_test, y_test, 1024)